{"name":"DF_TRNSF_Bronce","ppdf:dataflowId":"634d6f82-d3ae-40f4-9662-c33cbd1b9363","ppdf:owner":{"tenantId":"e6816e25-41db-4bb7-b1a6-25a718776f8c","userId":"a62cd89e-1254-4d78-8ead-68b7f0160949"},"ppdf:fastCopy":true,"version":"1.0","culture":"en-US","modifiedTime":"2025-05-22T12:03:08.7137387+00:00","ppdf:outputFileFormat":"Parquet","pbi:mashup":{"fastCombine":false,"allowNativeQueries":true,"queriesMetadata":{"Landing_AdventureWorks":{"queryId":"16761bb7-7876-4181-99af-ed38302f621f","queryName":"Landing_AdventureWorks"},"fxReadParquet":{"queryId":"3e486a5e-2c4f-44f3-9fd0-3e9a42a27da8","queryName":"fxReadParquet"},"fxFixParquetColumnTypes":{"queryId":"0f7f9256-2d30-41fc-a33b-57514a62a211","queryName":"fxFixParquetColumnTypes"},"Sales_SalesOrderDetail":{"queryId":"2890b75a-8395-4608-938f-8efd721b2a19","queryName":"Sales_SalesOrderDetail"},"Sales_SalesOrderHeader":{"queryId":"96343a8e-1b88-4e43-b9b9-44beb5c5ff8f","queryName":"Sales_SalesOrderHeader"},"Sales_SalesTerritory":{"queryId":"205ae565-8ed2-476c-ac50-05809ca0ae2d","queryName":"Sales_SalesTerritory"},"Production_Product":{"queryId":"1c4ec65c-31da-42bc-b794-bf5cc3dfa789","queryName":"Production_Product"},"Production_ProductCategory":{"queryId":"05d2673c-bb76-4df4-8387-f7412ecb08b1","queryName":"Production_ProductCategory"},"Production_ProductSubcategory":{"queryId":"7fd58a91-6eaf-4305-90d6-6a9a90f26f25","queryName":"Production_ProductSubcategory"},"DefaultDestination":{"queryId":"83e62ec2-a578-40cb-86fa-e03f3d3aed55","queryName":"DefaultDestination"},"Sales_SalesOrderDetail_DataDestination":{"queryId":"46916d5b-ee47-4f97-8161-e96f95f3b1f2","queryName":"Sales_SalesOrderDetail_DataDestination"},"Sales_SalesOrderDetail_WriteToDataDestination":{"queryId":"0d3de296-6207-45c3-a2db-1ac05b51a069","queryName":"Sales_SalesOrderDetail_WriteToDataDestination"},"Sales_SalesOrderDetail_TransformForWriteToDataDestination":{"queryId":"8942d824-1fd6-4e6d-8cd8-1528e8adc150","queryName":"Sales_SalesOrderDetail_TransformForWriteToDataDestination"},"DefaultStaging":{"queryId":"0b92f577-f377-4527-94a5-07c4471b976b","queryName":"DefaultStaging"},"FastCopyStaging":{"queryId":"b8b567d9-97f2-4a6f-98e1-c56f26fdd13b","queryName":"FastCopyStaging"},"Sales_SalesOrderHeader_DataDestination":{"queryId":"d1bdc2c6-99b5-48be-a9f3-7b9a0dd70f3d","queryName":"Sales_SalesOrderHeader_DataDestination"},"Sales_SalesOrderHeader_WriteToDataDestination":{"queryId":"0305af21-ffe0-4c98-8182-64e0295f30b0","queryName":"Sales_SalesOrderHeader_WriteToDataDestination"},"Sales_SalesOrderHeader_TransformForWriteToDataDestination":{"queryId":"d229482d-f4ee-4d46-abba-2a33f620587a","queryName":"Sales_SalesOrderHeader_TransformForWriteToDataDestination"},"Sales_SalesTerritory_DataDestination":{"queryId":"87883f99-78bf-4909-a498-2f5d02130a8b","queryName":"Sales_SalesTerritory_DataDestination"},"Sales_SalesTerritory_WriteToDataDestination":{"queryId":"11a9ad8b-6651-41dc-8e9e-d2dca19c58df","queryName":"Sales_SalesTerritory_WriteToDataDestination"},"Sales_SalesTerritory_TransformForWriteToDataDestination":{"queryId":"7c72356e-8091-4bce-a8ef-f26e2970b9df","queryName":"Sales_SalesTerritory_TransformForWriteToDataDestination"},"Production_Product_DataDestination":{"queryId":"3d503a31-2d1f-4c81-982c-14f220750449","queryName":"Production_Product_DataDestination"},"Production_Product_WriteToDataDestination":{"queryId":"cf14e429-5a40-4b7a-9965-2ffca20fffb8","queryName":"Production_Product_WriteToDataDestination"},"Production_Product_TransformForWriteToDataDestination":{"queryId":"b9e94241-3177-419c-afd6-8247a8db1021","queryName":"Production_Product_TransformForWriteToDataDestination"},"Production_ProductCategory_DataDestination":{"queryId":"87744195-7799-41d8-b983-5967488dacd6","queryName":"Production_ProductCategory_DataDestination"},"Production_ProductCategory_WriteToDataDestination":{"queryId":"ed46ab45-fab1-4365-a4a0-f652ead3dfa9","queryName":"Production_ProductCategory_WriteToDataDestination"},"Production_ProductCategory_TransformForWriteToDataDestination":{"queryId":"34f3ff0f-0275-41c5-a463-20776b35e53a","queryName":"Production_ProductCategory_TransformForWriteToDataDestination"},"Production_ProductSubcategory_DataDestination":{"queryId":"cf4e0fa2-c65e-451c-ba06-053a68c47240","queryName":"Production_ProductSubcategory_DataDestination"},"Production_ProductSubcategory_WriteToDataDestination":{"queryId":"ba9d79d2-c888-49b5-8ed4-ae12ae42c89a","queryName":"Production_ProductSubcategory_WriteToDataDestination"},"Production_ProductSubcategory_TransformForWriteToDataDestination":{"queryId":"b3872ff7-d958-4f0d-896f-16e5fd78a3e4","queryName":"Production_ProductSubcategory_TransformForWriteToDataDestination"}},"document":"section Section1;\r\nshared Landing_AdventureWorks = let\r\n  Source = Lakehouse.Contents(null),\r\n  Navigation = Source{[workspaceId = \"e234b20b-49a1-4e27-85b8-03fa86367e92\"]}[Data],\r\n  #\"Navigation 1\" = Navigation{[lakehouseId = \"826542c5-78c1-42eb-b27e-b0407e259c43\"]}[Data],\r\n  #\"Navigation 2\" = #\"Navigation 1\"{[Id = \"Files\", ItemKind = \"Folder\"]}[Data],\r\n  #\"Navigation 3\" = #\"Navigation 2\"{[Name = \"AdventureWorks\"]}[Content]\r\nin\r\n  #\"Navigation 3\";\r\nshared fxReadParquet = let\r\n  fxReadParquet = (tableName as text) as table => \nlet\n  Source = Landing_AdventureWorks,\n  #\"Navigation\" = Source{[Name = tableName]}[Content],\n  #\"Imported Parquet\" = Parquet.Document(#\"Navigation\"),\n  #\"Fixed Parquet\" = fxFixParquetColumnTypes(#\"Imported Parquet\")\nin\n  #\"Fixed Parquet\"\r\nin\r\n  fxReadParquet;\r\nshared fxFixParquetColumnTypes = let\r\n  fxFixParquetColumnTypes = (tablaOrigen as table) as table =>\nTable.TransformColumns(\n    tablaOrigen,\n    List.Transform(\n        Table.ColumnNames(tablaOrigen),\n        (col) => \n            let\n                colType = Value.Type(Table.Column(tablaOrigen, col){0})\n            in\n                if colType = type date or colType = type datetime or colType = type number then\n                    {col, each Text.From(_), type text}\n                else\n                    {col, each _, colType}\n    )\n)\r\nin\r\n  fxFixParquetColumnTypes;\r\nshared Sales_SalesOrderDetail = let\r\n  Sales_SalesOrderDetail = fxReadParquet(\"Sales.SalesOrderDetail.parquet\")\r\nin\r\n  Sales_SalesOrderDetail;\r\nshared Sales_SalesOrderHeader = let\r\n  Sales_SalesOrderHeader = fxReadParquet(\"Sales.SalesOrderHeader.parquet\")\r\nin\r\n  Sales_SalesOrderHeader;\r\nshared Sales_SalesTerritory = let\r\n  Sales_SalesTerritory = fxReadParquet(\"Sales.SalesTerritory.parquet\")\r\nin\r\n  Sales_SalesTerritory;\r\nshared Production_Product = let\r\n  Production_Product = fxReadParquet(\"Production.Product.parquet\")\r\nin\r\n  Production_Product;\r\nshared Production_ProductCategory = let\r\n  Production_ProductCategory = fxReadParquet(\"Production.ProductCategory.parquet\")\r\nin\r\n  Production_ProductCategory;\r\nshared Production_ProductSubcategory = let\r\n  Production_ProductSubcategory = fxReadParquet(\"Production.ProductSubcategory.parquet\")\r\nin\r\n  Production_ProductSubcategory;\r\nshared DefaultDestination = let\r\n  DefaultDestination = Lakehouse.Contents([EnableFolding = false]){[workspaceId = \"e234b20b-49a1-4e27-85b8-03fa86367e92\"]}[Data]{[lakehouseId = \"826542c5-78c1-42eb-b27e-b0407e259c43\"]}[Data]\r\nin\r\n  DefaultDestination;\r\nshared Sales_SalesOrderDetail_DataDestination = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"Sales_SalesOrderDetail\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[SalesOrderID = nullable Text.Type, SalesOrderDetailID = nullable Text.Type, CarrierTrackingNumber = nullable Text.Type, OrderQty = nullable Text.Type, ProductID = nullable Text.Type, SpecialOfferID = nullable Text.Type, UnitPrice = nullable Text.Type, UnitPriceDiscount = nullable Text.Type, LineTotal = nullable Text.Type, rowguid = nullable Text.Type, ModifiedDate = nullable Text.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"FastCopyStaging\"]\r\nshared Sales_SalesOrderDetail_WriteToDataDestination = let\r\n  Sales_SalesOrderDetail_WriteToDataDestination = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = Sales_SalesOrderDetail_DataDestination], (txn) => {TableAction.DeleteRows(txn[Target]), () => TableAction.InsertRows(txn[Target], Sales_SalesOrderDetail_TransformForWriteToDataDestination), Action.DoNothing}))\r\nin\r\n  Sales_SalesOrderDetail_WriteToDataDestination;\r\nshared Sales_SalesOrderDetail_TransformForWriteToDataDestination = let\r\n    SourceTable = Table.SelectColumns(Sales_SalesOrderDetail, {\"SalesOrderID\", \"SalesOrderDetailID\", \"CarrierTrackingNumber\", \"OrderQty\", \"ProductID\", \"SpecialOfferID\", \"UnitPrice\", \"UnitPriceDiscount\", \"LineTotal\", \"rowguid\", \"ModifiedDate\"})\r\nin\r\n    SourceTable;\r\nshared DefaultStaging = let\r\n  DefaultStaging = Pipeline.DefaultModelStorage()\r\nin\r\n  DefaultStaging;\r\nshared FastCopyStaging = let\r\n  FastCopyStaging = Pipeline.FastCopyModelStorage(DefaultStaging, [Required = false])\r\nin\r\n  FastCopyStaging;\r\nshared Sales_SalesOrderHeader_DataDestination = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"Sales_SalesOrderHeader\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[SalesOrderID = nullable Text.Type, RevisionNumber = nullable Text.Type, OrderDate = nullable Text.Type, DueDate = nullable Text.Type, ShipDate = nullable Text.Type, Status = nullable Text.Type, OnlineOrderFlag = nullable Logical.Type, SalesOrderNumber = nullable Text.Type, PurchaseOrderNumber = nullable Text.Type, AccountNumber = nullable Text.Type, CustomerID = nullable Text.Type, SalesPersonID = nullable Text.Type, TerritoryID = nullable Text.Type, BillToAddressID = nullable Text.Type, ShipToAddressID = nullable Text.Type, ShipMethodID = nullable Text.Type, CreditCardID = nullable Text.Type, CreditCardApprovalCode = nullable Text.Type, CurrencyRateID = nullable Int32.Type, SubTotal = nullable Text.Type, TaxAmt = nullable Text.Type, Freight = nullable Text.Type, TotalDue = nullable Text.Type, Comment = nullable Text.Type, rowguid = nullable Text.Type, ModifiedDate = nullable Text.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"FastCopyStaging\"]\r\nshared Sales_SalesOrderHeader_WriteToDataDestination = let\r\n  Sales_SalesOrderHeader_WriteToDataDestination = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = Sales_SalesOrderHeader_DataDestination], (txn) => {TableAction.DeleteRows(txn[Target]), () => TableAction.InsertRows(txn[Target], Sales_SalesOrderHeader_TransformForWriteToDataDestination), Action.DoNothing}))\r\nin\r\n  Sales_SalesOrderHeader_WriteToDataDestination;\r\nshared Sales_SalesOrderHeader_TransformForWriteToDataDestination = let\r\n    SourceTable = Table.SelectColumns(Sales_SalesOrderHeader, {\"SalesOrderID\", \"RevisionNumber\", \"OrderDate\", \"DueDate\", \"ShipDate\", \"Status\", \"OnlineOrderFlag\", \"SalesOrderNumber\", \"PurchaseOrderNumber\", \"AccountNumber\", \"CustomerID\", \"SalesPersonID\", \"TerritoryID\", \"BillToAddressID\", \"ShipToAddressID\", \"ShipMethodID\", \"CreditCardID\", \"CreditCardApprovalCode\", \"CurrencyRateID\", \"SubTotal\", \"TaxAmt\", \"Freight\", \"TotalDue\", \"Comment\", \"rowguid\", \"ModifiedDate\"})\r\nin\r\n    SourceTable;\r\nshared Sales_SalesTerritory_DataDestination = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"Sales_SalesTerritory\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[TerritoryID = nullable Text.Type, Name = nullable Text.Type, CountryRegionCode = nullable Text.Type, Group = nullable Text.Type, SalesYTD = nullable Text.Type, SalesLastYear = nullable Text.Type, CostYTD = nullable Text.Type, CostLastYear = nullable Text.Type, rowguid = nullable Text.Type, ModifiedDate = nullable Text.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"FastCopyStaging\"]\r\nshared Sales_SalesTerritory_WriteToDataDestination = let\r\n  Sales_SalesTerritory_WriteToDataDestination = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = Sales_SalesTerritory_DataDestination], (txn) => {TableAction.DeleteRows(txn[Target]), () => TableAction.InsertRows(txn[Target], Sales_SalesTerritory_TransformForWriteToDataDestination), Action.DoNothing}))\r\nin\r\n  Sales_SalesTerritory_WriteToDataDestination;\r\nshared Sales_SalesTerritory_TransformForWriteToDataDestination = let\r\n    SourceTable = Table.SelectColumns(Sales_SalesTerritory, {\"TerritoryID\", \"Name\", \"CountryRegionCode\", \"Group\", \"SalesYTD\", \"SalesLastYear\", \"CostYTD\", \"CostLastYear\", \"rowguid\", \"ModifiedDate\"})\r\nin\r\n    SourceTable;\r\nshared Production_Product_DataDestination = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"Production_Product\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[ProductID = nullable Text.Type, Name = nullable Text.Type, ProductNumber = nullable Text.Type, MakeFlag = nullable Logical.Type, FinishedGoodsFlag = nullable Logical.Type, Color = nullable Text.Type, SafetyStockLevel = nullable Text.Type, ReorderPoint = nullable Text.Type, StandardCost = nullable Text.Type, ListPrice = nullable Text.Type, Size = nullable Text.Type, SizeUnitMeasureCode = nullable Text.Type, WeightUnitMeasureCode = nullable Text.Type, Weight = nullable Decimal.Type, DaysToManufacture = nullable Text.Type, ProductLine = nullable Text.Type, Class = nullable Text.Type, Style = nullable Text.Type, ProductSubcategoryID = nullable Int32.Type, ProductModelID = nullable Int32.Type, SellStartDate = nullable Text.Type, SellEndDate = nullable DateTime.Type, DiscontinuedDate = nullable DateTime.Type, rowguid = nullable Text.Type, ModifiedDate = nullable Text.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"FastCopyStaging\"]\r\nshared Production_Product_WriteToDataDestination = let\r\n  Production_Product_WriteToDataDestination = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = Production_Product_DataDestination], (txn) => {TableAction.DeleteRows(txn[Target]), () => TableAction.InsertRows(txn[Target], Production_Product_TransformForWriteToDataDestination), Action.DoNothing}))\r\nin\r\n  Production_Product_WriteToDataDestination;\r\nshared Production_Product_TransformForWriteToDataDestination = let\r\n    SourceTable = Table.SelectColumns(Production_Product, {\"ProductID\", \"Name\", \"ProductNumber\", \"MakeFlag\", \"FinishedGoodsFlag\", \"Color\", \"SafetyStockLevel\", \"ReorderPoint\", \"StandardCost\", \"ListPrice\", \"Size\", \"SizeUnitMeasureCode\", \"WeightUnitMeasureCode\", \"Weight\", \"DaysToManufacture\", \"ProductLine\", \"Class\", \"Style\", \"ProductSubcategoryID\", \"ProductModelID\", \"SellStartDate\", \"SellEndDate\", \"DiscontinuedDate\", \"rowguid\", \"ModifiedDate\"})\r\nin\r\n    SourceTable;\r\nshared Production_ProductCategory_DataDestination = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"Production_ProductCategory\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[ProductCategoryID = nullable Text.Type, Name = nullable Text.Type, rowguid = nullable Text.Type, ModifiedDate = nullable Text.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"FastCopyStaging\"]\r\nshared Production_ProductCategory_WriteToDataDestination = let\r\n  Production_ProductCategory_WriteToDataDestination = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = Production_ProductCategory_DataDestination], (txn) => {TableAction.DeleteRows(txn[Target]), () => TableAction.InsertRows(txn[Target], Production_ProductCategory_TransformForWriteToDataDestination), Action.DoNothing}))\r\nin\r\n  Production_ProductCategory_WriteToDataDestination;\r\nshared Production_ProductCategory_TransformForWriteToDataDestination = let\r\n    SourceTable = Table.SelectColumns(Production_ProductCategory, {\"ProductCategoryID\", \"Name\", \"rowguid\", \"ModifiedDate\"})\r\nin\r\n    SourceTable;\r\nshared Production_ProductSubcategory_DataDestination = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"Production_ProductSubcategory\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[ProductSubcategoryID = nullable Text.Type, ProductCategoryID = nullable Text.Type, Name = nullable Text.Type, rowguid = nullable Text.Type, ModifiedDate = nullable Text.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"FastCopyStaging\"]\r\nshared Production_ProductSubcategory_WriteToDataDestination = let\r\n  Production_ProductSubcategory_WriteToDataDestination = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = Production_ProductSubcategory_DataDestination], (txn) => {TableAction.DeleteRows(txn[Target]), () => TableAction.InsertRows(txn[Target], Production_ProductSubcategory_TransformForWriteToDataDestination), Action.DoNothing}))\r\nin\r\n  Production_ProductSubcategory_WriteToDataDestination;\r\nshared Production_ProductSubcategory_TransformForWriteToDataDestination = let\r\n    SourceTable = Table.SelectColumns(Production_ProductSubcategory, {\"ProductSubcategoryID\", \"ProductCategoryID\", \"Name\", \"rowguid\", \"ModifiedDate\"})\r\nin\r\n    SourceTable;\r\n","connectionOverrides":[{"path":"Lakehouse","kind":"Lakehouse","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Lakehouse\",\"path\":\"Lakehouse\"}","audience":null}],"trustedConnections":[{"path":"Lakehouse","kind":"Lakehouse","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Lakehouse\",\"path\":\"Lakehouse\"}","audience":null}]}}